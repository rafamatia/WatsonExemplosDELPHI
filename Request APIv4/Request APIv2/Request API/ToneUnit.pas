unit ToneUnit;

{*******************************************************************************
    Generated By   : JsonToDelphiClass - 0.65
    Project link   : https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
    Generated On   : 2018-10-22 09:32:45

    Created By     : Petar Georgiev - (http://pgeorgiev.com)
    Adapted Web By : Marlon Nardi - (http://jsontodelphi.com)
*******************************************************************************}

interface

uses Generics.Collections, Rest.Json;

type

TTonesClass_001 = class
private
  FScore: Extended;
  FTone_id: String;
  FTone_name: String;
public
  property score: Extended read FScore write FScore;
  property tone_id: String read FTone_id write FTone_id;
  property tone_name: String read FTone_name write FTone_name;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TTonesClass_001;
end;

TSentences_toneClass = class
private
  FSentence_id: Extended;
  FText: String;
  FTones: TArray<TTonesClass_001>;
public
  property sentence_id: Extended read FSentence_id write FSentence_id;
  property text: String read FText write FText;
  property tones: TArray<TTonesClass_001> read FTones write FTones;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TSentences_toneClass;
end;

TTonesClass = class
private
  FScore: Extended;
  FTone_id: String;
  FTone_name: String;
public
  property score: Extended read FScore write FScore;
  property tone_id: String read FTone_id write FTone_id;
  property tone_name: String read FTone_name write FTone_name;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TTonesClass;
end;

TDocument_toneClass = class
private
  FTones: TArray<TTonesClass>;
public
  property tones: TArray<TTonesClass> read FTones write FTones;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TDocument_toneClass;
end;

TRootToneClass = class
private
  FDocument_tone: TDocument_toneClass;
  FSentences_tone: TArray<TSentences_toneClass>;
public
  property document_tone: TDocument_toneClass read FDocument_tone write FDocument_tone;
  property sentences_tone: TArray<TSentences_toneClass> read FSentences_tone write FSentences_tone;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TRootToneClass;
end;

implementation

{TTonesClass_001}


function TTonesClass_001.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TTonesClass_001.FromJsonString(AJsonString: string): TTonesClass_001;
begin
  result := TJson.JsonToObject<TTonesClass_001>(AJsonString)
end;

{TSentences_toneClass}

destructor TSentences_toneClass.Destroy;
var
  LtonesItem: TTonesClass_001;
begin

 for LtonesItem in FTones do
   LtonesItem.Free;

  inherited;
end;

function TSentences_toneClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TSentences_toneClass.FromJsonString(AJsonString: string): TSentences_toneClass;
begin
  result := TJson.JsonToObject<TSentences_toneClass>(AJsonString)
end;

{TTonesClass}


function TTonesClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TTonesClass.FromJsonString(AJsonString: string): TTonesClass;
begin
  result := TJson.JsonToObject<TTonesClass>(AJsonString)
end;

{TDocument_toneClass}

destructor TDocument_toneClass.Destroy;
var
  LtonesItem: TTonesClass;
begin

 for LtonesItem in FTones do
   LtonesItem.Free;

  inherited;
end;

function TDocument_toneClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TDocument_toneClass.FromJsonString(AJsonString: string): TDocument_toneClass;
begin
  result := TJson.JsonToObject<TDocument_toneClass>(AJsonString)
end;

{TRootToneClass}

constructor TRootToneClass.Create;
begin
  inherited;
  FDocument_tone := TDocument_toneClass.Create();
end;

destructor TRootToneClass.Destroy;
var
  Lsentences_toneItem: TSentences_toneClass;
begin

 for Lsentences_toneItem in FSentences_tone do
   Lsentences_toneItem.Free;

  FDocument_tone.Free;
  inherited;
end;

function TRootToneClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TRootToneClass.FromJsonString(AJsonString: string): TRootToneClass;
begin
  result := TJson.JsonToObject<TRootToneClass>(AJsonString)
end;

end.
